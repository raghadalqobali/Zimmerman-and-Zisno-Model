# -*- coding: utf-8 -*-
"""fuzzySystemsZimmermanandzisno.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DBhk0ahN02ulUxJIFiupl8gFMlTNX5VE
"""

#1 create matrix 5x8

import numpy as np

M = np.array = (
[12,8,10,12,112,114,123,126],
[14,9,11,13,98,102,104,117],
[15,12,13,16,96,93,101,106],
[16,14,14,18,99,84,103,102],
[19,13,17,17,101,94,88,97])

M

#2 separate the M matrix into two classes

C1 = []
C2 = []
threshold=50

for row in M:
    for col in row:
        if col<threshold:
            C1.append(col)
        else:
            C2.append(col)
    

c1=np.asarray(C1)
c2=np.asarray(C2)
print("The class 1 is = ",c1)
print("The class 2 is = ",c2)

#3 find the center for each class 

sum1=0.
sum2=0.
for i in c1:
    sum1+=i
        
center_c1=sum1/len(c1)

for j in c2:
    sum2+=j
        
center_c2=sum2/len(c2)

print("The center of class 1 is : ",center_c1)
print("The center of class 2 is : ",center_c2)

#4 convert M to vector 

arr_m = (np.asarray(M)).flatten()
print(arr_m)
arr_m.shape

#5 apply the model of zemmerman & zisno 

res = []
list1 = []
list2 = []
class1 = []
class2 = []
for x in arr_m :
    membership_1 = 1/(1+abs(x-center_c1))
    membership_2 = 1/(1+abs(x-center_c2))
    list1.append("{:.3f}".format(membership_1))
    list2.append("{:.3f}".format(membership_2))
    if membership_1 > membership_2:
        class1.append(x)
        res.append(1)
    else :
        class2.append(x)
        res.append(0)

        
print("membership for class 1 is {list1} = ".format(list1=list1))
print()
print()
print("membership for class 2 is {list2} = ".format(list2=list2))
class1=np.asarray(class1)
class2=np.asarray(class2)
res=np.asarray(res)
class1 = class1.reshape(5, 4)
class2 = class2.reshape(5, 4)
result = res.reshape(5, 8)

#6 print the results

print("class 1 is")
print(class1)
print()
print("class 2 is")
print(class2)
print()
print("The final result of the classification is")
print(result)

#6 Evaluation to check the sensetivity of the model

reference = np.array = (
[1,1,1,1,0,0,0,0],
[1,1,1,1,0,0,0,0],
[1,1,1,1,0,0,0,0],
[1,1,1,1,0,0,0,0],
[1,1,1,1,0,0,0,0])

count=0

for row,r in enumerate(result):
    for col,c in enumerate(r):
        if result[row][col]==reference[row][col]:
            count+=1
        col+=1
    row+=1
        
sens=(count/result.size)*100

print("The sensetivity of our model is",sens)